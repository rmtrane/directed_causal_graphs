
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## Run this script from folder that contains sim_data.csv.
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.2.1     ✔ purrr   0.3.3
✔ tibble  2.1.3     ✔ dplyr   0.8.3
✔ tidyr   1.0.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.4.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> 
> my_write_delim <- function (x, path, delim = " ", na = "NA", append = FALSE, col_names = !append,
+                             quote_escape = "double") {
+   stopifnot(is.data.frame(x))
+   x[] <- lapply(x, output_column)
+   readr:::stream_delim(x, path, delim = delim, col_names = col_names,
+                        append = append, na = na, quote_escape = quote_escape)
+ }
> 
> ## Input file.
> input_file <- ifelse(!interactive(), commandArgs(TRUE)[1], "sim_data.csv")
> 
> ## Read data
> sim_data <- read_csv(input_file)
Parsed with column specification:
cols(
  .default = col_double()
)
See spec(...) for full column specifications.
> 
> ## Get max lengths of ID and t, so we can pad these variables to appropriate lengths
> max_id <- max(sim_data$ID)
> max_time <- max(sim_data$t)
> 
> ## Create tibble with data by each ID
> sim_data_by_id <- sim_data %>%
+   rename(time = t) %>%
+   mutate(time = paste0("time", str_pad(time,
+                                        width = nchar(max_time),
+                                        pad = '0',
+                                        side = 'left'))) %>%
+   gather(key = 'gene', value = 'expression', -ID, -time) %>%
+   spread(time, expression) %>%
+   nest(raw = -ID) %>%
+   ungroup() %>%
+   mutate(ID = str_pad(ID, width = nchar(max_id), pad = '0', side = 'left'))
> 
> ## Check if folders exist. If not, create
> if (!dir.exists("raw_data"))
+   dir.create("raw_data")
> if (!dir.exists("permuted_data"))
+   dir.create("permuted_data")
> if (!dir.exists("normalized_data"))
+   dir.create("normalized_data")
> 
> ## Create 0-mean normalized data and permuted data
> all_data <- sim_data_by_id %>%
+   mutate(norm_and_permuted = map(raw, function(x){
+     tmp <- x %>% gather(-gene, key = "time", value = "expression") %>%
+       group_by(gene) %>%
+       mutate(expression = expression - mean(expression),
+              permuted = sample(expression)) %>%
+       gather(key = 'type', value = 'expression', expression, permuted) %>%
+       spread(time, expression) %>%
+       group_by(type) %>%
+       nest()
+ 
+     out <- tibble(normalized = filter(tmp, type == 'expression')$data,
+                   permuted = filter(tmp, type == 'permuted')$data)
+ 
+     return(out)
+   })) %>%
+   unnest(norm_and_permuted) %>%
+   gather(key = "type", value = "data", raw, normalized, permuted)
> 
> 
> normalized_only <- all_data %>%
+   filter(type == 'normalized') %>%
+   select(-type) %>%
+   unnest(cols = data) %>%
+   arrange(ID, gene)
> 
> write_csv(x = normalized_only, "sim_data_normalized.csv")
> 
> ## Write data to files. One file per ID by type (raw, normalized, or permuted)
> with(all_data,
+      pmap(list(x = ID, y = type, z = data),
+           function(x,y,z)
+             my_write_delim(z, path = paste0(y, "_data/", x, ".txt"),
+                            delim = "\t")))
[[1]]
[1] ""

[[2]]
[1] ""

[[3]]
[1] ""

[[4]]
[1] ""

[[5]]
[1] ""

[[6]]
[1] ""

[[7]]
[1] ""

[[8]]
[1] ""

[[9]]
[1] ""

[[10]]
[1] ""

[[11]]
[1] ""

[[12]]
[1] ""

[[13]]
[1] ""

[[14]]
[1] ""

[[15]]
[1] ""

[[16]]
[1] ""

[[17]]
[1] ""

[[18]]
[1] ""

[[19]]
[1] ""

[[20]]
[1] ""

[[21]]
[1] ""

[[22]]
[1] ""

[[23]]
[1] ""

[[24]]
[1] ""

[[25]]
[1] ""

[[26]]
[1] ""

[[27]]
[1] ""

[[28]]
[1] ""

[[29]]
[1] ""

[[30]]
[1] ""

[[31]]
[1] ""

[[32]]
[1] ""

[[33]]
[1] ""

[[34]]
[1] ""

[[35]]
[1] ""

[[36]]
[1] ""

[[37]]
[1] ""

[[38]]
[1] ""

[[39]]
[1] ""

[[40]]
[1] ""

[[41]]
[1] ""

[[42]]
[1] ""

[[43]]
[1] ""

[[44]]
[1] ""

[[45]]
[1] ""

[[46]]
[1] ""

[[47]]
[1] ""

[[48]]
[1] ""

[[49]]
[1] ""

[[50]]
[1] ""

[[51]]
[1] ""

[[52]]
[1] ""

[[53]]
[1] ""

[[54]]
[1] ""

[[55]]
[1] ""

[[56]]
[1] ""

[[57]]
[1] ""

[[58]]
[1] ""

[[59]]
[1] ""

[[60]]
[1] ""

[[61]]
[1] ""

[[62]]
[1] ""

[[63]]
[1] ""

[[64]]
[1] ""

[[65]]
[1] ""

[[66]]
[1] ""

[[67]]
[1] ""

[[68]]
[1] ""

[[69]]
[1] ""

[[70]]
[1] ""

[[71]]
[1] ""

[[72]]
[1] ""

[[73]]
[1] ""

[[74]]
[1] ""

[[75]]
[1] ""

[[76]]
[1] ""

[[77]]
[1] ""

[[78]]
[1] ""

[[79]]
[1] ""

[[80]]
[1] ""

[[81]]
[1] ""

[[82]]
[1] ""

[[83]]
[1] ""

[[84]]
[1] ""

[[85]]
[1] ""

[[86]]
[1] ""

[[87]]
[1] ""

[[88]]
[1] ""

[[89]]
[1] ""

[[90]]
[1] ""

[[91]]
[1] ""

[[92]]
[1] ""

[[93]]
[1] ""

[[94]]
[1] ""

[[95]]
[1] ""

[[96]]
[1] ""

[[97]]
[1] ""

[[98]]
[1] ""

[[99]]
[1] ""

[[100]]
[1] ""

[[101]]
[1] ""

[[102]]
[1] ""

[[103]]
[1] ""

[[104]]
[1] ""

[[105]]
[1] ""

[[106]]
[1] ""

[[107]]
[1] ""

[[108]]
[1] ""

[[109]]
[1] ""

[[110]]
[1] ""

[[111]]
[1] ""

[[112]]
[1] ""

[[113]]
[1] ""

[[114]]
[1] ""

[[115]]
[1] ""

[[116]]
[1] ""

[[117]]
[1] ""

[[118]]
[1] ""

[[119]]
[1] ""

[[120]]
[1] ""

[[121]]
[1] ""

[[122]]
[1] ""

[[123]]
[1] ""

[[124]]
[1] ""

[[125]]
[1] ""

[[126]]
[1] ""

[[127]]
[1] ""

[[128]]
[1] ""

[[129]]
[1] ""

[[130]]
[1] ""

[[131]]
[1] ""

[[132]]
[1] ""

[[133]]
[1] ""

[[134]]
[1] ""

[[135]]
[1] ""

[[136]]
[1] ""

[[137]]
[1] ""

[[138]]
[1] ""

[[139]]
[1] ""

[[140]]
[1] ""

[[141]]
[1] ""

[[142]]
[1] ""

[[143]]
[1] ""

[[144]]
[1] ""

[[145]]
[1] ""

[[146]]
[1] ""

[[147]]
[1] ""

[[148]]
[1] ""

[[149]]
[1] ""

[[150]]
[1] ""

[[151]]
[1] ""

[[152]]
[1] ""

[[153]]
[1] ""

[[154]]
[1] ""

[[155]]
[1] ""

[[156]]
[1] ""

[[157]]
[1] ""

[[158]]
[1] ""

[[159]]
[1] ""

[[160]]
[1] ""

[[161]]
[1] ""

[[162]]
[1] ""

[[163]]
[1] ""

[[164]]
[1] ""

[[165]]
[1] ""

[[166]]
[1] ""

[[167]]
[1] ""

[[168]]
[1] ""

[[169]]
[1] ""

[[170]]
[1] ""

[[171]]
[1] ""

[[172]]
[1] ""

[[173]]
[1] ""

[[174]]
[1] ""

[[175]]
[1] ""

[[176]]
[1] ""

[[177]]
[1] ""

[[178]]
[1] ""

[[179]]
[1] ""

[[180]]
[1] ""

[[181]]
[1] ""

[[182]]
[1] ""

[[183]]
[1] ""

[[184]]
[1] ""

[[185]]
[1] ""

[[186]]
[1] ""

[[187]]
[1] ""

[[188]]
[1] ""

[[189]]
[1] ""

[[190]]
[1] ""

[[191]]
[1] ""

[[192]]
[1] ""

[[193]]
[1] ""

[[194]]
[1] ""

[[195]]
[1] ""

[[196]]
[1] ""

[[197]]
[1] ""

[[198]]
[1] ""

[[199]]
[1] ""

[[200]]
[1] ""

[[201]]
[1] ""

[[202]]
[1] ""

[[203]]
[1] ""

[[204]]
[1] ""

[[205]]
[1] ""

[[206]]
[1] ""

[[207]]
[1] ""

[[208]]
[1] ""

[[209]]
[1] ""

[[210]]
[1] ""

[[211]]
[1] ""

[[212]]
[1] ""

[[213]]
[1] ""

[[214]]
[1] ""

[[215]]
[1] ""

[[216]]
[1] ""

[[217]]
[1] ""

[[218]]
[1] ""

[[219]]
[1] ""

[[220]]
[1] ""

[[221]]
[1] ""

[[222]]
[1] ""

[[223]]
[1] ""

[[224]]
[1] ""

[[225]]
[1] ""

[[226]]
[1] ""

[[227]]
[1] ""

[[228]]
[1] ""

[[229]]
[1] ""

[[230]]
[1] ""

[[231]]
[1] ""

[[232]]
[1] ""

[[233]]
[1] ""

[[234]]
[1] ""

[[235]]
[1] ""

[[236]]
[1] ""

[[237]]
[1] ""

[[238]]
[1] ""

[[239]]
[1] ""

[[240]]
[1] ""

[[241]]
[1] ""

[[242]]
[1] ""

[[243]]
[1] ""

[[244]]
[1] ""

[[245]]
[1] ""

[[246]]
[1] ""

[[247]]
[1] ""

[[248]]
[1] ""

[[249]]
[1] ""

[[250]]
[1] ""

[[251]]
[1] ""

[[252]]
[1] ""

[[253]]
[1] ""

[[254]]
[1] ""

[[255]]
[1] ""

[[256]]
[1] ""

[[257]]
[1] ""

[[258]]
[1] ""

[[259]]
[1] ""

[[260]]
[1] ""

[[261]]
[1] ""

[[262]]
[1] ""

[[263]]
[1] ""

[[264]]
[1] ""

[[265]]
[1] ""

[[266]]
[1] ""

[[267]]
[1] ""

[[268]]
[1] ""

[[269]]
[1] ""

[[270]]
[1] ""

[[271]]
[1] ""

[[272]]
[1] ""

[[273]]
[1] ""

[[274]]
[1] ""

[[275]]
[1] ""

[[276]]
[1] ""

[[277]]
[1] ""

[[278]]
[1] ""

[[279]]
[1] ""

[[280]]
[1] ""

[[281]]
[1] ""

[[282]]
[1] ""

[[283]]
[1] ""

[[284]]
[1] ""

[[285]]
[1] ""

[[286]]
[1] ""

[[287]]
[1] ""

[[288]]
[1] ""

[[289]]
[1] ""

[[290]]
[1] ""

[[291]]
[1] ""

[[292]]
[1] ""

[[293]]
[1] ""

[[294]]
[1] ""

[[295]]
[1] ""

[[296]]
[1] ""

[[297]]
[1] ""

[[298]]
[1] ""

[[299]]
[1] ""

[[300]]
[1] ""

> 
> ## Save file with gene names
> my_write_delim(sim_data_by_id$raw[[1]] %>% select(gene),
+                path = "list_of_genenames.txt", delim = "\t", col_names = F)
[1] ""
> 
> ## Write rep files
> all_data %>% select(ID, type) %>% unique() %>%
+   nest(data = ID) %>%
+   mutate(write = map2(data, type, ~my_write_delim(x = .x,
+                                                   path = paste0(.y, "_data/", .y, "_reps.txt"),
+                                                   col_names = FALSE)))
# A tibble: 3 x 3
  type                 data write    
  <chr>      <list<df[,1]>> <list>   
1 raw             [100 × 1] <chr [1]>
2 normalized      [100 × 1] <chr [1]>
3 permuted        [100 × 1] <chr [1]>
> 
> proc.time()
   user  system elapsed 
  8.147   1.039  10.429 
